esphome:
  name: frischluft

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
rtttl:
  output: rtttl_out
  on_finished_playback:
    - logger.log: 'Song ended!'

api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
ota:
  password: "some strong password"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Frischluft Fallback Hotspot"
    password: "some strong password for fallback"

captive_portal:

web_server:
  port: 80

# Example configuration entry
uart:
  rx_pin: 16
  tx_pin: 17
  baud_rate: 9600
  
output:
  - platform: ledc
    pin: 19
    frequency: 500
    id: output_red
  - platform: ledc
    pin: 23
    id: output_green
    frequency: 500
  - platform: ledc
    pin: 5
    id: output_blue
    frequency: 500
  # Buzzer
  - platform: ledc
    pin: 26
    id: rtttl_out
    
light:
  - platform: rgb
    name: "Frischluft LED"
    red: output_red
    green: output_green
    blue: output_blue
    id: led

i2c:
  sda: 21
  scl: 22

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    address: 0x3C
    lambda: |-
          it.print(0, 0, id(font1), "CO2-WERT");
          if (id(mhz19_co2).has_state()) {
            it.printf(0, 9, id(font2), "%d", int(id(mhz19_co2).state));
          }   
          it.print(80, 0, id(font1), "Desk");
          if (id(desk).has_state()) {
            it.printf(75, 9, id(font2), "%.2f", id(desk).state);
          }    
font:
  - file: 'slkscr.ttf'
    id: font1
    size: 8
  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 24
  - file: 'arial.ttf'
    id: font3
    size: 20

sensor:
  - platform: mhz19
    co2:
      name: "MH-Z19 CO2 Value"
      id: mhz19_co2
      on_value_range:
        - below: 1000
          then:
            - light.turn_on:
                id: led
                brightness: 100%
                red: 1.0
                green: 0.0
                blue: 1.0
        - below: 1200 
          above: 1000
          then:
            - rtttl.play: 'two short:d=4,o=5,b=100:16e6,16e6'
            - light.turn_on:
                id: led
                brightness: 100%
                red: 1.0
                green: 0.0
                blue: 0.0
        - above: 1200 
          then:
            - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'
            - light.turn_on:
                id: led
                brightness: 100%
                red: 1.0
                green: 1.0
                blue: 0.0
      
    temperature:
      name: "MH-Z19 Temperature"
    update_interval: 10s
    automatic_baseline_calibration: false


  - platform: ultrasonic
    trigger_pin: 25
    echo_pin: 32
    name: "Desk height"
    pulse_time: 20us
    update_interval: 10s
    id: desk
    unit_of_measurement: "cm"
    timeout: 6.0m
